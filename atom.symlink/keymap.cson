# Your keymap
#
# Atom keymaps work similarly to stylesheets. Just as stylesheets use selectors
# to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# '.editor':
#   'enter': 'editor:newline'
#
# '.workspace':
#   'ctrl-P': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#

###
# My pesonal keymap philsophy  for now:
# Use only two modifier keys, a 'C' key that will be either cmd or ctrl depending on
# platform/preference, and the shift 'S' key. Forget alt altogether (right now I tend
# to use alt for system-wide bindings anyway). Anything not important enough to
# make it onto a c- or c-s- binding gets mapped to a vim-leader command (which
# I still need to implement) or it simply gets called from the command pallete.
# In general, favor opening modal dialogues with these bindings rather than spraying,
# say, git-shortcut commands all across the c- and c-s- binding space.
# A bad example: c-s-l for "git log" and c-s-s for "git status".
# A good example: c-s-g for opening a "git cmds" fuzzyfinder panel, and then
# s-enter for quick hop to status, l-enter for quick hop to log.
# which makes the commands, functionally: c-s-g-s-enter for git status, etc.
###


# remapping for an emacs-like m-x

'body':
  'cmd-x': 'command-palette:toggle'
  'ctrl-x': 'command-palette:toggle'

'.workspace':
  'cmd-shift-T': 'unset!' # unsetting the terminal-status:new command

'.platform-darwin':
  'cmd-x': 'command-palette:toggle'
  'ctrl-x': 'command-palette:toggle'
  'cmd-shift-E': 'scratchpad:toggle'
  'shift-cmd-Y': 'live-archive:open'
  'cmd-shift-T': 'terminal-status:toggle' #cmd-t?
# boy this is ugly as hell too! it even clobbers core:cut.
# do I want it at cmd or ctrl? experiment ...

'body':
  'ctrl-j': 'core:move-down'
  'ctrl-k': 'core:move-up'

'.editor':
  'ctrl-j': 'core:move-down'
  'ctrl-k': 'core:move-up'

# setting project-manager selection panel to cmd-shift-o (default: ctrl-cmd-o)
'.platform-darwin':
  'shift-cmd-o': 'project-manager:toggle'

'.platform-win32':
  'shift-cmd-o': 'project-manager:toggle'

'.platform-linux':
  'shift-cmd-o': 'project-manager:toggle'

# boy that's ugly

# an attempt at adding jj to esc
# from https://github.com/atom/vim-mode/issues/334
# had to add "not(.visual-mode)" mode because it was breaking visual mode j/k
# movement keys
# removing it for now, see init script for reasons

# '.editor.vim-mode:not(.command-mode):not(.visual-mode)':
#   'j j': 'vim-mode:activate-command-mode'
#
# '.editor.vim-mode.insert-mode':
#   'j': 'insert-incomplete-keybinding'

# a small hack to experiment with bringing back :w,
# even though I really want to use command-pallete on :, I think

'.editor.vim-mode:not(.insert-mode)':
  ':': 'command-palette:toggle' #make a 'w' command to save
  # ': w enter': 'core:save'

# next: return to normal mode after lose focus > 10sec
